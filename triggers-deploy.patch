diff --git a/pkg/reconciler/eventlistener/resources/container.go b/pkg/reconciler/eventlistener/resources/container.go
index 5226a547..718eb73d 100644
--- a/pkg/reconciler/eventlistener/resources/container.go
+++ b/pkg/reconciler/eventlistener/resources/container.go
@@ -60,7 +60,16 @@ func MakeContainer(el *v1beta1.EventListener, configAcc reconcilersource.ConfigA
 			"--is-multi-ns=" + strconv.FormatBool(isMultiNS),
 			"--payload-validation=" + strconv.FormatBool(payloadValidation),
 		},
+		VolumeMounts: []corev1.VolumeMount{
+			{
+				Name:      "kubeconfig",
+				MountPath: "/kubeconfig",
+			},
+		},
 		Env: append(ev, []corev1.EnvVar{{
+			Name:  "KUBECONFIG",
+			Value: "/kubeconfig/kubeconfig",
+		}, {
 			Name:  "NAMESPACE",
 			Value: el.Namespace,
 		}, {
diff --git a/pkg/reconciler/eventlistener/resources/deployment.go b/pkg/reconciler/eventlistener/resources/deployment.go
index 31fb0246..98b41f16 100644
--- a/pkg/reconciler/eventlistener/resources/deployment.go
+++ b/pkg/reconciler/eventlistener/resources/deployment.go
@@ -54,13 +54,21 @@ func MakeDeployment(ctx context.Context, el *v1beta1.EventListener, configAcc re
 
 	var (
 		podlabels                 = kmeta.UnionMaps(filteredLabels, GenerateLabels(el.Name, c.StaticResourceLabels))
-		serviceAccountName        = el.Spec.ServiceAccountName
 		replicas                  *int32
 		vol                       []corev1.Volume
 		tolerations               []corev1.Toleration
 		nodeSelector, annotations map[string]string
 	)
 
+	vol = append(vol, corev1.Volume{
+		Name: "kubeconfig",
+		VolumeSource: corev1.VolumeSource{
+			Secret: &corev1.SecretVolumeSource{
+				SecretName: "kcp-kubeconfig",
+			},
+		},
+	})
+
 	for _, v := range container.Env {
 		// If TLS related env are set then mount secret volume which will be used while starting the eventlistener.
 		if v.Name == "TLS_CERT" {
@@ -85,9 +93,6 @@ func MakeDeployment(ctx context.Context, el *v1beta1.EventListener, configAcc re
 		if len(el.Spec.Resources.KubernetesResource.Template.Spec.NodeSelector) != 0 {
 			nodeSelector = el.Spec.Resources.KubernetesResource.Template.Spec.NodeSelector
 		}
-		if el.Spec.Resources.KubernetesResource.Template.Spec.ServiceAccountName != "" {
-			serviceAccountName = el.Spec.Resources.KubernetesResource.Template.Spec.ServiceAccountName
-		}
 		annotations = el.Spec.Resources.KubernetesResource.Template.Annotations
 		podlabels = kmeta.UnionMaps(podlabels, el.Spec.Resources.KubernetesResource.Template.Labels)
 	}
@@ -110,12 +115,11 @@ func MakeDeployment(ctx context.Context, el *v1beta1.EventListener, configAcc re
 					Annotations: annotations,
 				},
 				Spec: corev1.PodSpec{
-					Tolerations:        tolerations,
-					NodeSelector:       nodeSelector,
-					ServiceAccountName: serviceAccountName,
-					Containers:         []corev1.Container{container},
-					Volumes:            vol,
-					SecurityContext:    &securityContext,
+					Tolerations:     tolerations,
+					NodeSelector:    nodeSelector,
+					Containers:      []corev1.Container{container},
+					Volumes:         vol,
+					SecurityContext: &securityContext,
 				},
 			},
 		},
